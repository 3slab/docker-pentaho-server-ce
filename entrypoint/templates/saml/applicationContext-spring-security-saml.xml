<?xml version="1.0" encoding="UTF-8"?>
<!--===========================================================================
PENTAHO CORPORATION PROPRIETARY AND CONFIDENTIAL

Copyright 2002 - 2014 Pentaho Corporation (Pentaho). All rights reserved.

NOTICE: All information including source code contained herein is, and
remains the sole property of Pentaho and its licensors. The intellectual
and technical concepts contained herein are proprietary and confidential
to, and are trade secrets of Pentaho and may be covered by U.S. and foreign
patents, or patents in process, and are protected by trade secret and
copyright laws. The receipt or possession of this source code and/or related
information does not convey or imply any rights to reproduce, disclose or
distribute its contents, or to manufacture, use, or sell anything that it
may describe, in whole or in part. Any reproduction, modification, distribution,
or public display of this information without the express written authorization
from Pentaho is strictly prohibited and in violation of applicable laws and
international treaties. Access to the source code contained herein is strictly
prohibited to anyone except those individuals and entities who have executed
confidentiality and non-disclosure agreements or other agreements with Pentaho,
explicitly covering such access.
============================================================================-->
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:pen="http://www.pentaho.com/schema/pentaho-system"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
                           http://www.pentaho.com/schema/pentaho-system http://www.pentaho.com/schema/pentaho-system.xsd" 
       default-lazy-init="true">

<!-- ======================== FILTER CHAIN ======================= -->
  <!--
      if you wish to use channel security, add "channelProcessingFilter," in
      front of "httpSessionContextIntegrationFilter" in the list below
  -->
  <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
    <constructor-arg>
      <util:list>
        <!-- Virtual endpoint that simply replies with the csrf token header and parameter names, as well as the token value,
             in the response headers X-CSRF-HEADER, X-CSRF-PARAM and X-CSRF-TOKEN, respectively.
             This endpoint must not require CSRF protection (not part of csrfTokenProtectedEndpoints).
             This endpoint can be accessed anonymously.
             For embedding scenarios, requires CORS GET, withAuthentication access
             (configure cors-requests-allowed and cors-requests-allowed-domains in pentaho.xml).
              -->
        <sec:filter-chain pattern="/api/system/csrf"
                          filters="csrfTokenSecurityFilter,
                                   csrfTokenResponseHeaderFilter" />

        <sec:filter-chain pattern="/api/repos/dashboards/print"
                          filters="csrfTokenSecurityFilter,
                                   securityContextHolderAwareRequestFilter,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   httpSessionReuseDetectionFilter,
                                   logoutFilter,
                                   samlMetadataGeneratorFilter,
                                   samlLogoutFilter,
                                   samlSingleLogoutFilter,
                                   samlWebSSOProcessingFilter,
                                   authenticationProcessingFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   exceptionTranslationFilter,
                                   filterInvocationInterceptor" />

        <sec:filter-chain pattern="/webservices/**"
                          filters="csrfTokenSecurityFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   samlMetadataGeneratorFilter,
                                   samlWebSSOProcessingFilter,
                                   basicProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   exceptionTranslationFilterForWS,
                                   filterInvocationInterceptorForWS" />

        <sec:filter-chain pattern="/api/repos/**"
                          filters="csrfTokenSecurityFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   samlMetadataGeneratorFilter,
                                   samlWebSSOProcessingFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   exceptionTranslationFilter,
                                   filterInvocationInterceptorForWS,
                                   preFlightFilter" />

        <sec:filter-chain pattern="/api/**"
                          filters="csrfTokenSecurityFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   samlMetadataGeneratorFilter,
                                   samlWebSSOProcessingFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   exceptionTranslationFilterForWS,
                                   filterInvocationInterceptorForWS" />

        <sec:filter-chain pattern="/plugin/reporting/api/jobs/**"
                          filters="csrfTokenSecurityFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   samlMetadataGeneratorFilter,
                                   samlWebSSOProcessingFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   exceptionTranslationFilterForWS,
                                   filterInvocationInterceptorForWS,
                                   preFlightFilter" />

        <sec:filter-chain pattern="/plugin/**"
                          filters="csrfTokenSecurityFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   samlMetadataGeneratorFilter,
                                   samlWebSSOProcessingFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   exceptionTranslationFilterForWS,
                                   filterInvocationInterceptorForWS" />

        <sec:filter-chain pattern="/**"
                          filters="csrfTokenSecurityFilter,
                                   securityContextHolderAwareRequestFilter,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   httpSessionReuseDetectionFilter,
                                   logoutFilter,
                                   samlMetadataGeneratorFilter,
                                   samlLogoutFilter,
                                   samlSingleLogoutFilter,
                                   samlWebSSOProcessingFilter,
                                   authenticationProcessingFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   exceptionTranslationFilter,
                                   filterInvocationInterceptor" />
      </util:list>
    </constructor-arg>
  </bean>
  
   <!--
      Note the order that entries are placed against the
      objectDefinitionSource is critical. The FilterSecurityInterceptor will
      work from the top of the list down to the FIRST pattern that matches
      the request URL. Accordingly, you should place MOST SPECIFIC (ie
      a/b/c/d.*) expressions first, with LEAST SPECIFIC (ie a/.*)
      expressions last
  -->
  <bean id="filterInvocationInterceptor"
        class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
    <property name="authenticationManager" ref="authenticationManager" />
    <property name="accessDecisionManager" ref="httpRequestAccessDecisionManager" />
    <!--
        Note - the "=Nobody" below is saying that resource URLs with those
        patterns not be available through a web call.
    -->
     <property name="securityMetadataSource">
      <!-- http://stackoverflow.com/questions/30099851/spring-security-samples-preauth-xml-example-fails-to-run#answer-30105317 -->
      <sec:filter-security-metadata-source request-matcher="ciRegex" use-expressions="false">
        <sec:intercept-url pattern="\A/osgi/cxf/hadoop-cluster/runTests.*\Z" access="Authenticated" />
        <sec:intercept-url pattern="\A/osgi/cxf/hadoop-cluster/.*\Z" access="Administrator" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/web/(.+/)*.+\.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/kettle/executeJob.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/kettle/executeTrans.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/.*require-cfg.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/.*require-js-cfg.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/web/require.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/web/require-cfg.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/data-access/resources/gwt/.*css\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webcontext.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/web/cache/cache-service.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/cacheexpirationservice.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/js/theme.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/themes/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/web/dojo/djconfig.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/pentaho-mobile/resources/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/docs/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/mantlelogin/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/mantle/mantleloginservice/*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/mantle/.*\Z" access="Authenticated" />
        <sec:intercept-url pattern="\A/welcome/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/public/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/login.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/ping/alive.gif.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/j_spring_security_check.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/getimage.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/getresource.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/admin.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/auditreport.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/auditreportlist.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/versioncontrol.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/propertieseditor.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/propertiespanel.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/subscriptionadmin.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/resetrepository.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/viewaction.*solution.admin.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/scheduleradmin.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/publish.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/logout.*\Z" access="Anonymous" />
        <sec:intercept-url pattern="\A/solutionrepositoryservice.*component=delete.*solution=system.*\Z" access="Nobody" />
        <sec:intercept-url pattern="\A/solutionrepositoryservice.*solution=system.*component=delete.*\Z" access="Nobody" />
        <sec:intercept-url pattern=".*system.*pentaho.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*applicationcontext.*.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*pentahoobjects.spring.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*pentahosystemconfig.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*adminplugins.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*plugin.properties.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*sessionstartupactions.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*systemlisteners.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*hibernate.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*birt/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*dialects/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*google/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*jasperreports/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*kettle/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*logs/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*mondrian/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*quartz/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*simple-jndi/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*smtp-email/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*ui/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*\.\./.*" access="Nobody" />
        <sec:intercept-url pattern="\A/plugin/reporting/api/jobs/.*\Z" access="Anonymous,Authenticated" method="OPTIONS" />
        <sec:intercept-url pattern="\A/plugin/reporting/api/jobs/.*\Z" access="Anonymous,Authenticated" method="HEAD" />
        <sec:intercept-url pattern="\A/api/repos/.*\Z" access="Anonymous,Authenticated" method="OPTIONS" />
        <sec:intercept-url pattern="\A/api/repos/.*\Z" access="Anonymous,Authenticated" method="HEAD" />
        <sec:intercept-url pattern="\A/.*\Z" access="Authenticated" />
      </sec:filter-security-metadata-source>
    </property>
  </bean>

  
    <!-- Default of ssoEnabled true disables the SessionExpiredDialog, so the sample 
         behaves as it always has when a session times out. However, it may be preferable
         to set the ssoEnabled value to false, and add the ssoEnabled init-param in 
         pentaho-server/tomcat/webapps/pentaho/WEB-INF/web.xml, which will enable the
         SessionExpiredDialog and redirect users to /Home on session timeout, which
         sends users back to the IdP, instead of /Login, which behaves erratically:
         
           <filter>
            <filter-name>Pentaho Web Context Filter</filter-name>
            <filter-class>com.pentaho.platform.web.http.filters.PentahoEnterpriseWebContextFilter</filter-class>
            <init-param />
            ...
            
            <init-param>
                <param-name>ssoEnabled</param-name>
                <param-value>true</param-value>
            </init-param>

          </filter>
         
    -->
  <bean id="httpSessionPentahoSessionContextIntegrationFilter"
        class="org.pentaho.platform.web.http.filters.HttpSessionPentahoSessionIntegrationFilter" >
      <property name="ssoEnabled" value="true" />
  </bean>

  <bean id="httpRequestAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
    <property name="allowIfAllAbstainDecisions" value="false" />
    <constructor-arg>
      <util:list>
        <ref bean="roleVoter" />
      </util:list>
     </constructor-arg>
  </bean>

	<!-- ===================== HTTP REQUEST SECURITY ==================== -->

	<!-- overridden from applicationContext-spring-security.xml -->
  <bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
    <constructor-arg ref="samlAuthenticationFilterEntryPoint"/>
    <property name="accessDeniedHandler">
      <bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl" />
    </property>
  </bean>


	<!-- overridden from applicationContext-spring-security.xml -->
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="/logout.jsp" /> <!-- URL redirected to after logout -->
		<constructor-arg>
			<util:list>
				<bean class="org.pentaho.platform.web.http.security.PentahoLogoutHandler" />
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</util:list>
		</constructor-arg>
		<property name="filterProcessesUrl" value="/platform/logout" />
	</bean>
  
  <bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
    <constructor-arg>
      <util:list>
        <pen:bean class="org.springframework.security.authentication.AuthenticationProvider"/>
        <ref bean="anonymousAuthenticationProvider" />
      </util:list>
    </constructor-arg>
    <property name="authenticationEventPublisher" ref="defaultAuthenticationEventPublisher"/>
  </bean>

	<!-- ================================= -->
	<!--   SPRING-SECURITY-SAML FILTERS    -->
	<!-- ================================= -->

	<pen:bean id="samlAuthenticationFilterEntryPoint" class="org.springframework.security.web.AuthenticationEntryPoint">
		<pen:attributes><pen:attr key="providerName" value="saml.authentication.entry.point"/></pen:attributes>
	</pen:bean>

	<pen:bean id="samlWebSSOProcessingFilter" class="javax.servlet.Filter">
	    <pen:attributes><pen:attr key="providerName" value="saml.filter.websso.processing"/></pen:attributes>
	</pen:bean>

	<pen:bean id="samlWebSSOHoKProcessingFilter" class="javax.servlet.Filter">
	    <pen:attributes><pen:attr key="providerName" value="saml.filter.websso.hok.processing"/></pen:attributes>
	</pen:bean>

	<pen:bean id="samlMetadataGeneratorFilter" class="javax.servlet.Filter">
	    <pen:attributes><pen:attr key="providerName" value="saml.filter.metadata.generator"/></pen:attributes>
	</pen:bean>

	<pen:bean id="samlLogoutFilter" class="javax.servlet.Filter">
	    <pen:attributes><pen:attr key="providerName" value="saml.filter.logout"/></pen:attributes>
	</pen:bean>

	<pen:bean id="samlSingleLogoutFilter" class="javax.servlet.Filter">
	    <pen:attributes><pen:attr key="providerName" value="saml.filter.single.logout"/></pen:attributes>
	</pen:bean>
	
</beans>
